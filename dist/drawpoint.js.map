{"version":3,"file":"drawpoint.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap be67349c1a7cdffae9b7","webpack:///src/point.js","webpack:///src/curve.js","webpack:///src/numeric.js","webpack:///src/util.js","webpack:///src/color.js","webpack:///src/draw.js","webpack:///src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"drawpoint\"] = factory();\n\telse\n\t\troot[\"drawpoint\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap be67349c1a7cdffae9b7","\"use strict\";\n\nimport {clone} from \"./util\";\n\nexport function point(x, y) {\n    return {x, y};\n}\n\nexport function makePoint(func, ...cps) {\n    return point(\n        func(...cps.map(cp => cp.x)),\n        func(...cps.map(cp => cp.y)));\n}\n\nexport const origin = Object.freeze(point(0, 0));\n\n/**\n * Insert this special point in the list of points given to drawPoints to\n * move to the next point instead of drawing to the next point\n * @readonly\n * @type {Object}\n */\nexport const breakPoint = Object.freeze({\n    break: true\n});\n\n/**\n * Signals for a fill path to not try to complete it by drawing a curve from end\n * point to first point as the fill has already done its job\n * move to the next point instead of drawing to the next point\n * @readonly\n * @type {Object}\n */\nexport const endPoint = Object.freeze({\n    end: true\n});\n\n/**\n * Treat points as vectors and add them, optionally after scaling p2\n * @param p1\n * @param p2\n * @param scaleBy\n * @returns {{x: *, y: *}}\n */\nexport function add(p1, p2, scaleBy = 1) {\n    return makePoint((pp1, pp2) => {\n        return pp1 + pp2 * scaleBy;\n    }, p1, p2);\n}\n\n/**\n * Get the difference of 2 draw points p2 - p1; conceptually a vector pointing p1 -> p2\n * @param {{x:number, y:number}} p1 First point\n * @param {{x:number, y:number}} p2 Second point\n * @returns {{x: number, y: number}}\n */\nexport function diff(p1, p2) {\n    return makePoint((pp1, pp2) => {\n        return pp2 - pp1;\n    }, p1, p2);\n}\n\n/**\n * Get the magnitude of a vector\n * @param vec\n * @returns {number} Euclidean (L^2) norm of vec\n */\nexport function norm(vec) {\n    return Math.sqrt(vec.x * vec.x + vec.y * vec.y);\n}\n\n/**\n * Get the angle of a vector in radians\n * @param vec\n * @returns {number} Angle in radians\n */\nexport function angle(vec) {\n    return Math.atan2(vec.y, vec.x);\n}\n\n/**\n * Get a point after scaling it relative to a reference point.\n * Grows the vector referencePt -> pt by scaleBy.\n * @param pt\n * @param scaleBy\n * @param referencePt The point from which to scale\n * @returns {{x: *, y: *}}\n */\nexport function scale(pt, scaleBy, referencePt = origin) {\n    return add(referencePt, diff(referencePt, pt), scaleBy);\n}\n\n\n\n/**\n * Relative to 0,0, get the direction a draw point/vector is pointing at\n * @param vec\n * @returns {{x: number, y: number}}\n */\nexport function getUnitVector(vec) {\n    const magnitude = norm(vec);\n    return makePoint(v => v / magnitude, vec);\n}\n\n/**\n * Get counterclockwise perpendicular unit vector\n * @param vec Point that doubles as a vector from (0,0) to the point\n * @returns {{x: number, y: number}}\n */\nexport function getPerpendicularVector(vec) {\n    // rotate counterclockwise by 90 degrees\n    return getUnitVector(point(-vec.y, vec.x));\n}\n\n/**\n * Remove any extra information from a point down to just x,y\n */\nexport function extractPoint(pt) {\n    return point(pt.x, pt.y);\n}\n\n/**\n * Remove any extra information from a point and reflect across y axis\n */\nexport function reflect(pt, m = Infinity, b = 0) {\n    if (!pt) {\n        return pt;\n    }\n    let c, cm;\n\n    // vertical linear\n    if (m === Infinity) {\n        c = 0;\n        cm = 0;\n        // has no single y-intercept\n        b = pt.y;\n    } else {\n        c = (pt.x + (pt.y - b) * m) / (1 + m * m);\n        cm = c * m;\n    }\n\n    return point(\n        2 * c - pt.x,\n        2 * cm - pt.y + 2 * b\n    );\n}\n\n/**\n * Shift a draw point and its control points\n * @param {object} pt\n * @param {number} dx\n * @param {number} dy\n * @returns {object}\n */\nexport function adjust(pt, dx, dy) {\n    if (!pt) {\n        return pt;\n    }\n    // return a point with x and y adjusted by dx and dy respectively\n    const movedPoint = point(pt.x + dx, pt.y + dy);\n    if (pt.cp1) {\n        movedPoint.cp1 = point(pt.cp1.x + dx, pt.cp1.y + dy);\n    }\n    if (pt.cp2) {\n        movedPoint.cp2 = point(pt.cp2.x + dx, pt.cp2.y + dy);\n    }\n    return movedPoint;\n}\n\n/**\n * Shift a sequence of draw points\n * @param dx\n * @param dy\n * @param points\n * @returns {Array}\n */\nexport function adjustPoints(dx, dy, ...points) {\n    const shiftedPoints = [];\n    points.forEach((pt) => {\n        shiftedPoints.push(adjust(pt, dx, dy));\n    });\n    return shiftedPoints;\n}\n\n/**\n * Explode or shrink points around a center point\n * @param center The point other points are scaled relative to\n * @param {number} scaleBy Multiplier for the distance between each point and center\n * @param points Points to scale relative to center\n */\nexport function scalePoints(center, scaleBy, ...points) {\n    points.forEach((pt) => {\n        if (!pt || pt.hasOwnProperty(\"x\") === false) {\n            return;\n        }\n        const {x, y} = scale(pt, scaleBy, center);\n        pt.x = x;\n        pt.y = y;\n        if (pt.cp1) {\n            pt.cp1 = scale(pt.cp1, scaleBy, center);\n        }\n        if (pt.cp2) {\n            pt.cp2 = scale(pt.cp2, scaleBy, center);\n        }\n    });\n}\n\n/**\n * Rotate a set of points about a pivot in place\n * @param {object} pivot The point to rotate about\n * @param {number} rad Radians counterclockwise to rotate points\n * @param points List of points to rotate about pivot\n */\nexport function rotatePoints(pivot, rad, ...points) {\n    let cos = Math.cos(rad), sin = Math.sin(rad);\n    points.forEach((pt) => {\n        if (!pt || pt.hasOwnProperty(\"x\") === false) {\n            return;\n        }\n        rotateDiff(pivot, pt, sin, cos);\n        if (pt.cp1) {\n            rotateDiff(pivot, pt.cp1, sin, cos);\n        }\n        if (pt.cp2) {\n            rotateDiff(pivot, pt.cp2, sin, cos);\n        }\n    });\n}\n\n/**\n * Helper for rotate points to be used with cached sin and cos\n * @param pivot Point around which to rotate\n * @param pt Point to be rotated\n * @param sin Cached sin(rad) to rotate by\n * @param cos Cached cos(rad) to rotate by\n */\nfunction rotateDiff(pivot, pt, sin, cos) {\n    const pointDiff = diff(pivot, pt);\n    const dx = pointDiff.x * cos - pointDiff.y * sin;\n    const dy = pointDiff.x * sin + pointDiff.y * cos;\n    pt.x = pivot.x + dx;\n    pt.y = pivot.y + dy;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/point.js","/**\n * Created by johnson on 11.05.17.\n */\n\nimport {add, makePoint, extractPoint, diff, getPerpendicularVector} from \"./point\";\nimport {roundToDec} from \"./numeric\";\n\nexport function applyToCurve(p1, p2, {linear, quadratic, cubic}) {\n    const ep1 = extractPoint(p1);\n    const ep2 = extractPoint(p2);\n    if (p2.cp1 && p2.cp2) {\n        return cubic(ep1, p2.cp1, p2.cp2, ep2);\n    }\n    const cp = p2.cp1 || p2.cp2;\n    if (cp) {\n        return quadratic(ep1, cp, ep2);\n    } else {\n        return linear(ep1, ep2);\n    }\n}\n\n/**\n * Get a point at t (out of [0,1]) along the [p1, p2] curve\n * @param t\n * @param p1\n * @param p2\n * @returns {*}\n */\nexport function getPointOnCurve(t, p1, p2) {\n    return applyToCurve(p1, p2, {\n        linear: (...cps) => getPointOnLine(t, ...cps),\n        quadratic(...cps) {\n            return makePoint(getQuadraticValue.bind(null, t), ...cps);\n        },\n        cubic(...cps) {\n            return makePoint(getCubicValue.bind(null, t), ...cps);\n        },\n    });\n}\n\n/**\n * Shorthand for getting point on a line connecting p1 -> p2\n * Useful for force treatment of p2 as a linear end point even if it has control points\n * @param t\n * @param p1\n * @param p2\n * @returns {*}\n */\nexport function getPointOnLine(t, p1, p2) {\n    return makePoint(getLinearValue.bind(null, t), p1, p2);\n}\n\nfunction getLinearValue(t, p1, p2) {\n    // (1 - t) * p1 + t * p2\n    return t * (p2 - p1) + p1;\n}\n\nfunction getQuadraticValue(t, p1, cp, p2) {\n    // (1 - t)^2 * p1 + 2(1 - t)t * cp + t^2 * p2\n    // gather coefficients of t^2, t, and 1\n    return (p1 + p2 - 2 * cp) * t * t + 2 * (cp - p1) * t + p1;\n}\n\nfunction getCubicValue(t, p1, cp1, cp2, p2) {\n    // (1 - t)^3 * p1 + 3(1 - t)^2 * t * cp1 + 3(1 - t)t^2 * cp2 + t^3 * p2\n    // leave in unexpanded form\n    return p1 * (1 - t) * (1 - t) * (1 - t) + 3 * cp1 * (1 - t) * (1 - t) * t +\n        3 * cp2 * (1 - t) * t * t + p2 * t * t * t;\n}\n\nfunction splitBezier(t, p1, cp1, cp2, p2) {\n    // split a cubic cubic based on De Casteljau, t is between [0,1]\n    // just a series of linear interpolations\n    const E = getPointOnLine(t, p1, cp1);\n    const F = getPointOnLine(t, cp1, cp2);\n    const G = getPointOnLine(t, cp2, p2);\n    const H = getPointOnLine(t, E, F);\n    const J = getPointOnLine(t, F, G);\n    const K = getPointOnLine(t, H, J);\n    return {\n        left: {\n            p1,\n            cp1: E,\n            cp2: H,\n            p2: K\n        },\n        right: {\n            p1: K,\n            cp1: J,\n            cp2: G,\n            p2\n        }\n    };\n}\n\nfunction splitQuadratic(t, p1, cp, p2) {\n    // split a quadratic cubic based on De Casteljau, t is between [0,1]\n    const D = getPointOnLine(t, p1, cp);\n    const E = getPointOnLine(t, cp, p2);\n    const F = getPointOnLine(t, D, E);\n\n    return {\n        left: {\n            p1,\n            cp1: D,\n            p2: F\n        },\n        right: {\n            p1: F,\n            cp1: E,\n            p2\n        }\n    };\n}\n\nfunction splitLinear(t, p1, p2) {\n    // split a linear linear\n    const C = getPointOnLine(t, p1, p2);\n    return {\n        left: {\n            p1,\n            p2: C\n        },\n        right: {\n            p1: C,\n            p2\n        }\n    };\n}\n\n/**\n * Split the curve between two drawpoints and return all the resulting drawpoints\n * @memberof module:da\n * @param {number} t \"time\" along the curve to split at. Since all curves are parameterized\n * curves, t is their parameter. Can be thought of as traversing along the curve, where 0 is\n * at the start point and 1 is at the end point. This value can go beyond [0,1].\n * @param {object} p1 Starting drawpoint\n * @param {object} p2 Ending drawpoint and also where we look at the control points\n * @returns {{left, right}} Object having a left and right property, each with their own\n * p1 (start point), p2 (end point), and optionally cp1 and cp2 depending on what kind of\n * curve was split. Note that sp.left.p2 === sp.right.p1 always in value.\n */\nexport function splitCurve(t, p1, p2) {\n    // split either a quadratic or cubic curve depending on number of control points on\n    // the end point\n    return applyToCurve(p1, p2, {\n        linear: splitLinear.bind(null, t),\n        quadratic: splitQuadratic.bind(null, t),\n        cubic: splitBezier.bind(null, t),\n    });\n}\n\nfunction interpolateLinear(p1, p2, p) {\n    // infinite number of options, can't calculate\n    if (p2 === p1) {\n        return [];\n    }\n    // t\n    return [(p - p1) / (p2 - p1)];\n}\n\nfunction solveQuadraticEquation(a, b, c) {\n\n    const discriminant = b * b - 4 * a * c;\n\n    if (discriminant < 0) {\n        return [];\n\n    } else {\n        return [\n            (-b + Math.sqrt(discriminant)) / (2 * a),\n            (-b - Math.sqrt(discriminant)) / (2 * a)\n        ];\n    }\n}\n\n\nfunction interpolateQuadratic(p1, cp1, p2, p) {\n    const a = (p1 - 2 * cp1 + p2);\n    const b = 2 * (cp1 - p1);\n    const c = p1 - p;\n\n    // 2 possible values for t\n    return solveQuadraticEquation(a, b, c);\n}\n\nfunction cubeRoot(v) {\n    if (v < 0) {\n        return -Math.pow(-v, 1 / 3);\n    } else {\n        return Math.pow(v, 1 / 3);\n    }\n}\n\n/**\n * Solve a cubic equation of the form x^3 + a * x^2 + b * x + c = 0 for x\n * Uses Cardano's equation\n * See https://trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n * @param a\n * @param b\n * @param c\n * @returns {*}\n */\nfunction solveCubicEquation(a, b, c) {\n\n    const a3 = a / 3;\n    // reduce to t^3 + p * t + q = 0 form\n    // always reducible by substituting x = t - a / 3\n    const p = (3 * b - a * a) / 3;\n    const p3 = p / 3;\n    const q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;\n    const q2 = q / 2;\n\n    // further transformation into (u - v)^3 + 3uv(u - v) = u^3 - v^3\n    // with substitutions p = 3uv, -q = u^3 - v^3, t = u - v\n    // v = p/(3u) substituted into\n    // u^3 - v^3 = -q gives\n    // u^3 + q - (p/(3u))^3 = 0 multiply by u^3\n    // u^6 + qu^3 - (p/3)^3 = 0 quadratic in u^3\n    // u^3 = (-q +- sqrt(q^3 + 4(p/3)^3)) / 2 simplified to\n    // u^3 = -q/2 +- sqrt((q/2)^2 + (p/3)^3) get v^3 from u^3 - v^3 = -q\n    // v^3 = q/2  +- sqrt((q/2)^2 + (p/3)^3)\n    // and determine the discriminant:\n    const discriminant = roundToDec(q2 * q2 + p3 * p3 * p3, 8);\n\n    // 1 real root\n    if (discriminant > 0) {\n        const sqrtDiscriminant = Math.sqrt(discriminant);\n        const u = cubeRoot(-q2 + sqrtDiscriminant);\n        const v = cubeRoot(q2 + sqrtDiscriminant);\n        const x1 = u - v - a3;\n        // ignore other imaginary roots\n        return [x1];\n    }\n\n    // all roots real (3 in total, 1 single and 1 double)\n    if (discriminant === 0) {\n        // v = -u\n        const u = cubeRoot(-q2);\n        // t = u - v, x = t - a/3 = u - v - a/3 = 2u - a/3\n        const x1 = 2 * u - a3;\n        // conjugate roots produce 1 double root\n        const x2 = -u - a3;\n        return [x1, x2];\n    }\n\n    // all roots are real and different (unpleasant imaginary discriminant)\n    // first represent in polar form (a + bi) = r(cos(phi) + i*sin(phi))\n    // factoring out i = sqrt(-1)\n    // u^3 = -q/2 + i*sqrt(-discriminant)\n    // v^3 = q/2  + i*sqrt(-discriminant)\n    // for u^3, a = -q/2, b = sqrt(-discriminant)\n    // r^2 = a^2 + b^2 = (-q/2)^2 - discriminant\n    // r^2 = (q/2)^2 - ((q/2)^2 + (p/3)^3) = -(p/3)^3\n    const r = Math.sqrt(-p3 * p3 * p3);\n    // cos(phi) = a/r (triangle with a along Re, b along Im and r hypotenuse)\n    let cosphi = -q2 / r;\n    // correct for float rounding\n    if (cosphi < -1) {\n        cosphi = -1;\n    } else if (cosphi > 1) {\n        cosphi = 1;\n    }\n    const phi = Math.acos(cosphi);\n    // de Moivre's law -> [r(cos(phi) + i*sin(phi)]^n = r^n * (cos(phi/n) + i*sin(phi/n))\n    // values below easy to see if seen as vectors in complex plane\n    // u = r^(1/3) * (cos(phi/3)  + i*sin(phi/3))\n    // v = r^(1/3) * (-cos(phi/3) + i*sin(phi/3))\n    // x = u - v - a/3\n    // imaginary parts cancel out\n    const commonPrefix = 2 * cubeRoot(r);\n    const x1 = commonPrefix * Math.cos(phi / 3) - a3;\n    const x2 = commonPrefix * Math.cos((phi + 2 * Math.PI) / 3) - a3;\n    const x3 = commonPrefix * Math.cos((phi + 4 * Math.PI) / 3) - a3;\n    return [x1, x2, x3];\n}\n\nfunction interpolateCubic(p1, cp1, cp2, p2, p) {\n    // and rewrite from [a(1-t)^3 + 3bt(1-t)^2 + 3c(1-t)t^2 + dt^3] form\n    p1 -= p;\n    cp1 -= p;\n    cp2 -= p;\n    p2 -= p;\n\n    // to [t^3 + at^2 + bt + c] form:\n    const d = -p1 + 3 * cp1 - 3 * cp2 + p2;\n    const a = (3 * p1 - 6 * cp1 + 3 * cp2 ) / d;\n    const b = (-3 * p1 + 3 * cp1) / d;\n    const c = p1 / d;\n\n    return solveCubicEquation(a, b, c).map(t => roundToDec(t, 4));\n}\n\n\n/**\n * Get points along the curve from t = [0,1] that share the fixed dimension as betweenPoint.\n * For example, if betweenPoint = {x:10, y:null}, then we are looking for all points with\n * x = 10.\n * @param p1\n * @param p2\n * @param betweenPoint Query that has either x or y set to null which is to be determined\n * @returns {Array} List of draw points that have a \"t\" property which is how far they are along the curve\n */\nexport function interpolateCurve(p1, p2, betweenPoint) {\n    let knownDim;\n    if (betweenPoint.x === null) {\n        knownDim = \"y\";\n    } else if (betweenPoint.y === null) {\n        knownDim = \"x\";\n    } else {\n        return [];\n    }\n\n    const ts = applyToCurve(p1, p2, {\n        linear: (...cps) => interpolateLinear(...cps.map(cp => cp[knownDim]), betweenPoint[knownDim]),\n        quadratic: (...cps) => interpolateQuadratic(...cps.map(cp => cp[knownDim]), betweenPoint[knownDim]),\n        cubic: (...cps) => interpolateCubic(...cps.map(cp => cp[knownDim]), betweenPoint[knownDim]),\n    }).filter((t) => {\n        // solving cubic equations is not very numerically stable...\n        t = roundToDec(t, 3);\n        return t >= 0 && t <= 1;\n    });\n\n    return ts.map((t) => {\n        const p = getPointOnCurve(t, p1, p2);\n        p.t = t;\n        return p;\n    });\n\n}\n\n\n/**\n * Return the control point for a quadratic curve between two points with\n * a simple deflection parameter\n * @param p1\n * @param p2\n * @param t How far along the linear between p1 and p2 the control point should start\n * @param deflection Which direction and how far perpendicular to the p1-p2 linear\n * the control point should be (the norm of the perpendicular vector)\n * @returns {{x: number, y: number}}\n */\nexport function simpleQuadratic(p1, p2, t = 0.5, deflection = 0) {\n    const cp1 = getPointOnLine(t, p1, p2);\n    return add(cp1, getPerpendicularVector(diff(p1, p2)), deflection);\n}\n\n\n/**\n * Increase the degree of a cubic curve (e.g. quadratic to cubic) without changing its shape\n * @param p1 Starting point of the curve\n * @param p2 Ending point of the curve and holds the other control points\n */\nexport function elevateDegree(p1, p2) {\n    const cps = [p1];\n    for (let cp in p2) {\n        if (cp.startsWith(\"cp\") && p2.hasOwnProperty(cp)) {\n            cps.push(p2[cp]);\n        }\n    }\n    cps.push(extractPoint(p2));\n\n    const newEndPoint = extractPoint(p2);\n    // see https://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-elev.html\n    for (let i = 1, newDegree = cps.length; i < newDegree; ++i) {\n        const coefficient = i / newDegree;\n\n        newEndPoint[\"cp\" + i] = makePoint((cpsPrev, cps) => {\n            return coefficient * cpsPrev + (1 - coefficient) * cps;\n        }, cps[i - 1], cps[i]);\n    }\n    return newEndPoint;\n}\n\n/**\n * Get the cubic cubic control point representation of the curve from start to end.\n * If end already has 2 control points return them; if end has only 1 control point (quadratic)\n * then return 2 control points that would lead to an equivalent curve; if end has no control\n * point (linear) then return 2 control points located identically at the midpoint between\n * start and end.\n * @param p1\n * @param p2\n * @returns {[*,*]} cp1 and cp2 of end point\n */\nexport function getCubicControlPoints(p1, p2) {\n    return applyToCurve(p1, p2, {\n        linear ()  {\n            const newEnd = elevateDegree(p1, elevateDegree(p1, p2));\n            return [newEnd.cp1, newEnd.cp2];\n        },\n        quadratic () {\n            const newEnd = elevateDegree(p1, p2);\n            return [newEnd.cp1, newEnd.cp2];\n        },\n        cubic: () => [p2.cp1, p2.cp2]\n    });\n}\n\n/**\n * Transform start curve into end curve (results in cubic cubic) with the amount\n * of transformation determined by t [0,1]. Limited to transforming the end point as the start and\n * end curves must have the same starting point\n * @param t Amount to transform, [0,1] 0 is no transformation at all and is equal to the start curve;\n * 1 is full transformation and is equal to the end curve\n * @param p1\n * @param initP2\n * @param endP2\n * @returns Replacement draw point for endP2\n */\nexport function transformCurve(t, p1, initP2, endP2) {\n    if (!initP2) {\n        return endP2;\n    }\n    if (!endP2) {\n        return initP2;\n    }\n    const [initCp1, initCp2] = getCubicControlPoints(p1, initP2);\n    const [endCp1, endCp2] = getCubicControlPoints(p1, endP2);\n    const newEnd = getPointOnLine(t, initP2, endP2);\n    newEnd.cp1 = getPointOnLine(t, initCp1, endCp1);\n    newEnd.cp2 = getPointOnLine(t, initCp2, endCp2);\n    return newEnd;\n}\n\n\n// WEBPACK FOOTER //\n// src/curve.js","/**\n * Created by Johnson on 2017-04-02.\n */\n\n/**\n * Convert radians to degrees\n * @param radian\n * @returns {number}\n */\nexport function deg(radian) {\n    return 180 * radian / Math.PI;\n}\n\n/**\n * Convert degrees to radians\n * @param degree\n * @returns {number}\n */\nexport function rad(degree) {\n    return degree * Math.PI / 180;\n}\n\n/**\n * Unwrap a radian to its equivalent form between [-PI, PI]\n * @param rad\n */\nexport function unwrapRad(rad) {\n    while (rad > Math.PI) {\n        rad -= 2 * Math.PI;\n    }\n    while (rad < -Math.PI) {\n        rad += 2 * Math.PI;\n    }\n    return rad;\n}\n\n/**\n * Clamp a number between a minimum and maximum value\n * @param {number} num\n * @param {number} min\n * @param {number} max\n * @returns {number} Clamped number\n */\nexport function clamp(num, min, max) {\n    return num < min ? min : num > max ? max : num;\n}\n\n/**\n * Round a number to a fixed number of decimals\n * @param {number} num Number to round\n * @param {number} numDecimals Number of decimals\n * @returns {number}\n */\nexport function roundToDec(num, numDecimals) {\n    return parseFloat(num.toFixed(numDecimals));\n}\n\n\n\n// WEBPACK FOOTER //\n// src/numeric.js","/**\n * Created by johnson on 10.05.17.\n */\n\nexport function clone(obj) {\n    if (obj) {\n        return JSON.parse(JSON.stringify(obj));\n    } else {\n        return obj;\n    }\n}\n\n/**\n * Define a draw point if it doesn't exist already\n * @param {object} ex Export holding draw points\n * @param {string} drawPointName Name of the location\n * @param {object} definition Object holding x, y, cp1, and cp2\n */\nexport function fillerDefinition(ex, drawPointName, definition = {}) {\n    if (ex.hasOwnProperty(drawPointName)) {\n        return;\n    }\n    ex[drawPointName] = definition;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util.js","/**\n * Created by Johnson on 2017-04-02.\n */\n\n/**\n * Extract numeric RGB values from a HTML compatible string (whitespace ignored)\n * @param {string} rgbString RGB string in the format \"rgb(100,220,42)\"\n * @returns {(object|null)} Either an object holding r,g,b properties, or null if not matched\n */\nexport function extractRGB(rgbString) {\n    const rgb = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/.exec(rgbString);\n    if (rgb) {\n        return {\n            r: parseInt(rgb[1]),\n            g: parseInt(rgb[2]),\n            b: parseInt(rgb[3])\n        };\n    }\n    return null;\n}\n\n/**\n * Extract numeric HSL values from a HTML compatible string (whitespace ignored)\n * @param {string} hslString HSL string in the format \"hsl(310,12%,25%)\"\n * @returns {(object|null)} Either an object holding h,s,l properties, or null if not matched\n */\nexport function extractHSL(hslString) {\n    const hsl = /hsl\\(\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*,\\s*([+-]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([+-]?\\d+(?:\\.\\d+)?)%\\s*\\)/.exec(hslString);\n    if (hsl) {\n        return {\n            h: parseFloat(hsl[1]),\n            s: parseFloat(hsl[2]),\n            l: parseFloat(hsl[3]),\n        };\n    }\n    return null;\n}\n\n/**\n * Extract numeric RGB values from a HTML compatible hex string (whitespace ignored)\n * @param {string} hexString Hex string in the format \"#ffaabc\"\n * @returns {(object|null)} Either an object holding r,g,b properties, or null if not matched\n */\nexport function extractHex(hexString) {\n    const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexString);\n    if (rgb) {\n        return {\n            r: parseInt(rgb[1], 16),\n            g: parseInt(rgb[2], 16),\n            b: parseInt(rgb[3], 16)\n        };\n    }\n    return null;\n}\n\n/**\n * Convert an RGB object to HSL object, which are more intuitive to modify.\n * Adapted from https://github.com/mjackson/\n * @param {object} rgb RGB object holding r,g,b properties (each [0,255])\n * @returns {object} HSL object holding h,s,l properties (h [0,360], s,l [0,100])\n */\nexport function RGBToHSL(rgb) {\n    let r, g, b;\n    [r, g, b] = [rgb.r, rgb.g, rgb.b];\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h, s, l = (max + min) / 2;\n\n    if (max == min) {\n        h = s = 0;  // achromatic\n    } else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n        case g:\n            h = (b - r) / d + 2;\n            break;\n        case b:\n            h = (r - g) / d + 4;\n            break;\n        default:\n            break;\n        }\n        h /= 6;\n    }\n    h *= 360;\n    s *= 100;\n    l *= 100;\n\n    return rgb.hasOwnProperty(\"a\") ? {\n        h,\n        s,\n        l,\n        a: rgb.a\n    } : {\n        h,\n        s,\n        l\n    };\n}\n\n/**\n * Converts an HSL color value to RGB\n * Adapted from https://github.com/mjackson/\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * @param {object} hsl HSL object holding h,s,l properties (h [0,360], s,l [0,100])\n * @returns {object} RGB object holding r,g,b properties (each [0,255])\n */\nexport function HSLToRGB(hsl) {\n    let {h, s, l} = hsl;\n    h /= 360;\n    s /= 100;\n    l /= 100;\n\n    let r, g, b;\n\n    if (s == 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = function hue2rgb(p, q, t) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        let p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    r = Math.round(r * 255);\n    g = Math.round(g * 255);\n    b = Math.round(b * 255);\n    return hsl.hasOwnProperty(\"a\") ? {\n        r,\n        g,\n        b,\n        a: hsl.a\n    } : {\n        r,\n        g,\n        b\n    };\n}\n\n/**\n * Adjust an existing color into a new color\n * @param color A color in RGB, hex, or HSL form\n * @param adjustment Object with h, s, l, and optionally a as properties for how much to modify them by (addition)\n */\nexport function adjustColor(color, adjustment) {\n    // convert everything to HSL\n    let hsl = null;\n    if (typeof color === \"string\") {\n        // get the first non-null result\n        hsl = extractHSL(color);\n        if (hsl === null) {\n            hsl = hsl || extractRGB(color);\n            hsl = hsl || extractHex(color);\n            // have an RGB value\n            if (hsl) {\n                hsl = RGBToHSL(hsl);\n            }\n        }\n    } else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") &&\n        color.hasOwnProperty(\"l\")) {\n        hsl = color;\n    } else if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") &&\n        color.hasOwnProperty(\"b\")) {\n        hsl = RGBToHSL(color);\n    }\n\n    // can't do it\n    if (hsl === null) {\n        return null;\n    }\n    hsl.h += adjustment.h || 0;\n    hsl.s += adjustment.s || 0;\n    hsl.l += adjustment.l || 0;\n    if (adjustment.hasOwnProperty(\"a\")) {\n        return `hsla(${hsl.h},${hsl.s}%,${hsl.l}%,${adjustment.a})`;\n    } else {\n        return `hsl(${hsl.h},${hsl.s}%,${hsl.l}%)`;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/color.js","\"use strict\";\n\nimport {breakPoint, clone,  scale, extractPoint} from \"./point\";\nimport {simpleQuadratic} from \"./curve\";\n\n/**\n * Styling option to not show stroke or fill\n * @readonly\n * @type {string}\n */\nexport const none = \"rgba(0,0,0,0)\";\n\n/**\n * Draw the path formed by the list of drawpoints\n * @param {Context2DTracked} ctx Context2D to render to, if it exists\n * @param {Object[]} points Ordered list of draw points, each with x and y\n */\nexport function drawPoints(ctx, ...points) {\n    // given ctx and a list of points, draw points between them based on how many control points\n    // are defined for each\n    // does not begin a path or fill or stroke (just moves pen between the points)\n    if (points.length < 1) {\n        return;\n    }\n    let startPoint = points[0];\n    // if null is passed through, just continue from last location\n    if (startPoint) {\n        if (startPoint === breakPoint) {\n            startPoint = points[1];\n        }\n        if (startPoint && startPoint.hasOwnProperty(\"x\")) {\n            ctx.moveTo(startPoint.x, startPoint.y);\n        }\n    }\n    // for every point after\n    for (let i = 1, len = points.length; i < len; ++i) {\n        let p = points[i];\n        // allow calls with nonexistent points so that different drawing modes can be\n        // consolidated\n        if (!p) {\n            // console.log(\"don't have point #\", i);\n            continue;\n        }\n        if (p === breakPoint) {\n            ++i;\n            if (i < points.length) {\n                p = points[i];\n                ctx.moveTo(p.x, p.y);\n            }\n        } else if (p.cp2 && p.cp1) {\n            ctx.bezierCurveTo(p.cp1.x, p.cp1.y, p.cp2.x, p.cp2.y, p.x, p.y, p.traceOptions);\n        } else if (p.cp1) {\n            ctx.quadraticCurveTo(p.cp1.x, p.cp1.y, p.x, p.y, p.traceOptions);\n        } else if (p.cp2) {\n            ctx.quadraticCurveTo(p.cp2.x, p.cp2.y, p.x, p.y, p.traceOptions);\n        } else if (p.hasOwnProperty(\"x\")) {\n            ctx.lineTo(p.x, p.y);\n        }\n    }\n}\n\n/**\n * Get the drawpoints for a circle\n * @param {object} center Point at the center of the circle\n * @param {number} radius Radius in cm\n * @returns {object[]} List of draw points for this circle (could be passed to guiMenuItem)\n */\nexport function drawCircle(center, radius) {\n    const stretch = 0.552284749831 * radius;\n    let top = {\n        x: center.x,\n        y: center.y + radius\n    };\n    let right = {\n        x: center.x + radius,\n        y: center.y\n    };\n    let bot = {\n        x: center.x,\n        y: center.y - radius\n    };\n    let left = {\n        x: center.x - radius,\n        y: center.y\n    };\n    top.cp1 = {\n        x: left.x,\n        y: left.y + stretch\n    };\n    top.cp2 = {\n        x: top.x - stretch,\n        y: top.y\n    };\n    right.cp1 = {\n        x: top.x + stretch,\n        y: top.y\n    };\n    right.cp2 = {\n        x: right.x,\n        y: right.y + stretch\n    };\n    bot.cp1 = {\n        x: right.x,\n        y: right.y - stretch\n    };\n    bot.cp2 = {\n        x: bot.x + stretch,\n        y: bot.y\n    };\n    left.cp1 = {\n        x: bot.x - stretch,\n        y: bot.y\n    };\n    left.cp2 = {\n        x: left.x,\n        y: left.y - stretch\n    };\n    // doesn't actually matter in which order you draw them\n    return [top, right, bot, left, top];\n}\n\nexport function drawSpecificCurl(left, center, right) {\n    const p1 = extractPoint(left);\n    const p2 = extractPoint(center);\n    const p3 = extractPoint(right);\n\n    {\n        const {t = 0.5, deflection = 0.5} = left;\n        p2.cp1 = simpleQuadratic(p1, p2, t, deflection);\n    }\n    {\n        const {t = 0.5, deflection = 0.5} = right;\n        p3.cp1 = simpleQuadratic(p1, p2, t, deflection);\n    }\n    return [p1, p2, p3];\n}\n\n\n/**\n * Debug the curve going into a drawpoint. Use by wrapping a drawpoint with it when returning\n * to guiMenuItem.\n * @param {object} pt\n * @param {object} options Options for how to show the points\n * @returns {*}\n */\nexport function tracePoint(pt, options) {\n    if (!options) {\n        options = {radius:1};\n    } else if (typeof options === \"number\") {\n        // convenience for defining radius of trace point\n        options = {radius:options};\n    }\n    pt.traceOptions = {point:options};\n    return pt;\n}\n\n\n\n/**\n * Given a curve defined by (start, end), return a draw point such that (end, returned point) looks identical,\n * but travels in the opposite direction.\n * @param start\n * @param end\n * @returns {*}\n */\nexport function reverseDrawPoint(start, end) {\n    if (!start || !end) {\n        return start;\n    }\n    return {\n        x  : start.x,\n        y  : start.y,\n        cp1: clone(end.cp2),\n        cp2: clone(end.cp1)\n    };\n}\n\n/**\n * For a cubic curve point, get a control point on the other side of the point so that the\n * curve is smooth.\n * @param {point} pt End point of a cubic curve (must have 2nd control point)\n * @param {number} scaleBy How much back to extend the continuing control point.\n * A value of 1 produces a symmetric curve.\n * @returns {{x, y}|{x: number, y: number}|*} Continuing control point\n */\nexport function getSmoothControlPoint(pt, scaleBy) {\n    if (pt.hasOwnProperty(\"cp2\") === false) {\n        throw new Error(\"point has no second control point; can't get smooth control point\");\n    }\n    return scale(pt.cp2, -scaleBy, pt);\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/draw.js","export * from \"./util\";\nexport * from \"./color\";\nexport * from \"./numeric\";\nexport * from \"./point\";\nexport * from \"./curve\";\nexport * from \"./draw\";\n\n\n\n// WEBPACK FOOTER //\n// src/index.js"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;AChEA;AACA;;;;;AAGA;AAIA;AAoCA;AAYA;AAWA;AASA;AAYA;AAWA;AAUA;AAQA;AAOA;AA8BA;AAsBA;AAcA;AAuBA;AACA;AApNA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AADA;AACA;AAGA;;;;;;;AAOA;AACA;AADA;AACA;AAGA;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AACA;AAAA;AACA;AACA;AAGA;;;;;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3OA;AAqBA;AAoBA;AA8FA;AAiKA;AAuCA;AAWA;AA+BA;AAyBA;AACA;AAtZA;AACA;AAAA;AACA;AANA;;;;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAPA;AASA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AAUA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAUA;AAAA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AATA;AAWA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7ZA;AASA;AAQA;AAiBA;AAUA;AArDA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;;;;;;;;;;;;ACnDA;AAcA;AAlBA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAiBA;AAiBA;AAkBA;AAoDA;AA+CA;AAhKA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClMA;AACA;;;;;AAgBA;AAkDA;AAsDA;AAwBA;AAoBA;AAoBA;AACA;AAxLA;AACA;AAAA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}
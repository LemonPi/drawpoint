{"version":3,"sources":["webpack://drawpoint/webpack/universalModuleDefinition","webpack://drawpoint/webpack/bootstrap","webpack://drawpoint/./point.ts","webpack://drawpoint/./util.ts","webpack://drawpoint/./numeric.ts","webpack://drawpoint/./curve.ts","webpack://drawpoint/./index.ts","webpack://drawpoint/./draw.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","point","x","y","makePoint","func","cps","map","cp","add","p1","p2","scaleBy","pp1","pp2","diff","norm","vec","Math","sqrt","scale","pt","referencePt","origin","getUnitVector","magnitude","v","adjust","dx","dy","movedPoint","cp1","cp2","rotateDiff","pivot","sin","cos","pointDiff","freeze","breakPoint","break","endPoint","end","atan2","b","Infinity","cm","shiftedPoints","points","forEach","push","center","rad","obj","JSON","parse","stringify","ex","drawPointName","definition","radian","PI","degree","num","min","max","numDecimals","parseFloat","toFixed","applyToCurve","linear","quadratic","cubic","ep1","extractPoint","ep2","getPointOnCurve","getPointOnLine","getQuadraticValue","getCubicValue","getLinearValue","splitBezier","E","F","G","H","J","K","left","right","splitQuadratic","D","splitLinear","C","interpolateLinear","interpolateQuadratic","a","discriminant","solveQuadraticEquation","cubeRoot","pow","interpolateCubic","a3","p3","q2","roundToDec","u","sqrtDiscriminant","cosphi","phi","acos","commonPrefix","solveCubicEquation","elevateDegree","startsWith","newEndPoint","newDegree","coefficient","cpsPrev","length","getCubicControlPoints","newEnd","betweenPoint","knownDim","filter","deflection","getPerpendicularVector","initP2","endP2","initCp1","initCp2","endCp1","endCp2","start","clone","cubicEndPoint","none","ctx","startPoint","moveTo","len","bezierCurveTo","traceOptions","quadraticCurveTo","lineTo","radius","stretch","top","undefined","bot","simpleQuadratic","options"],"mappings":"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","file":"drawpoint.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"drawpoint\"] = factory();\n\telse\n\t\troot[\"drawpoint\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","export interface Point {\n    x: number;\n    y: number;\n}\n\nexport interface DrawPoint extends Point {\n    cp1?: Point;\n    cp2?: Point;\n    break?: boolean;\n    end?: boolean;\n}\n\nexport function point(x: number, y: number): Point {\n    return {x, y};\n}\n\ntype ModFunction = (...dim: number[]) => number;\n\n/**\n * Make a new point where each dimension is the result of applying a function to\n * the corresponding dimension of a list of control points.\n * @param func\n * @param cps\n * @returns {{x, y}|*}\n */\nexport function makePoint(func: ModFunction, ...cps: DrawPoint[]): DrawPoint {\n    return point(func(...cps.map(cp => cp.x)), func(...cps.map(cp => cp.y)));\n}\n\nexport const origin: DrawPoint = Object.freeze(point(0, 0));\n\n/**\n * Insert this special point in the list of points given to drawPoints to\n * move to the next point instead of drawing to the next point\n * @readonly\n * @type {Object}\n */\nexport const breakPoint: DrawPoint = Object.freeze({x: 0, y: 0, break: true});\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Signals for a fill path to not try to complete it by drawing a curve from end\n * point to first point as the fill has already done its job\n * move to the next point instead of drawing to the next point\n * @readonly\n * @type {Object}\n */\nexport const endPoint: DrawPoint = Object.freeze({x: 0, y: 0, end: true});\n\n/**\n * Treat points as vectors and add them, optionally after scaling p2\n * @param p1\n * @param p2\n * @param scaleBy\n * @returns {{x: *, y: *}}\n */\nexport function add(p1: Point, p2: Point, scaleBy: number = 1): Point {\n    return makePoint((pp1, pp2) => {\n        return pp1 + pp2 * scaleBy;\n    }, p1, p2);\n}\n\n/**\n * Get the difference of 2 draw points p2 - p1; conceptually a vector pointing p1 -> p2\n * @param {{x:number, y:number}} p1 First point\n * @param {{x:number, y:number}} p2 Second point\n * @returns {{x: number, y: number}}\n */\nexport function diff(p1: Point, p2: Point): Point {\n    return makePoint((pp1, pp2) => {\n        return pp2 - pp1;\n    }, p1, p2);\n}\n\n/**\n * Get the magnitude of a vector\n * @param vec\n * @returns {number} Euclidean (L^2) norm of vec\n */\nexport function norm(vec: Point): number {\n    return Math.sqrt(vec.x * vec.x + vec.y * vec.y);\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Get the angle of a vector in radians\n * @param vec\n * @returns {number} Angle in radians\n */\nexport function angle(vec: Point): number {\n    return Math.atan2(vec.y, vec.x);\n}\n\n/**\n * Get a point after scaling it relative to a reference point.\n * Grows the vector referencePt -> pt by scaleBy.\n * @param pt\n * @param scaleBy\n * @param referencePt The point from which to scale\n * @returns {{x: *, y: *}}\n */\nexport function scale(pt: Point, scaleBy: number, referencePt: Point = origin): Point {\n    return add(referencePt, diff(referencePt, pt), scaleBy);\n}\n\n\n/**\n * Relative to 0,0, get the direction a draw point/vector is pointing at\n * @param vec\n * @returns {{x: number, y: number}}\n */\nexport function getUnitVector(vec: Point): Point {\n    const magnitude = norm(vec);\n    return makePoint(v => v / magnitude, vec);\n}\n\n/**\n * Get counterclockwise perpendicular unit vector\n * @param vec Point that doubles as a vector from (0,0) to the point\n * @returns {{x: number, y: number}}\n */\nexport function getPerpendicularVector(vec: Point): Point {\n    // rotate counterclockwise by 90 degrees\n    return getUnitVector(point(-vec.y, vec.x));\n}\n\n/**\n * Remove any extra information from a point down to just x,y\n */\nexport function extractPoint(pt: Point): Point {\n    return point(pt.x, pt.y);\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Remove any extra information from a point and reflect across y axis\n */\nexport function reflect(pt: Point, m: number = Infinity, b: number = 0): Point {\n    if (!pt) {\n        return pt;\n    }\n    let c, cm;\n\n    // vertical linear\n    if (m === Infinity) {\n        c = 0;\n        cm = 0;\n        // has no single y-intercept\n        b = pt.y;\n    } else {\n        c = (pt.x + (pt.y - b) * m) / (1 + m * m);\n        cm = c * m;\n    }\n\n    return point(2 * c - pt.x, 2 * cm - pt.y + 2 * b);\n}\n\n/**\n * Shift a draw point and its control points\n * @param {object} pt\n * @param {number} dx\n * @param {number} dy\n * @returns {object}\n */\nexport function adjust(pt: DrawPoint, dx: number, dy: number): DrawPoint {\n    if (!pt) {\n        return pt;\n    }\n    // return a point with x and y adjusted by dx and dy respectively\n    const movedPoint: DrawPoint = point(pt.x + dx, pt.y + dy);\n    if (pt.cp1) {\n        movedPoint.cp1 = point(pt.cp1.x + dx, pt.cp1.y + dy);\n    }\n    if (pt.cp2) {\n        movedPoint.cp2 = point(pt.cp2.x + dx, pt.cp2.y + dy);\n    }\n    return movedPoint;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Shift a sequence of draw points and return the shifted points\n * @param dx\n * @param dy\n * @param points\n * @returns {Array}\n */\nexport function adjustPoints(dx: number, dy: number, ...points: DrawPoint[]): DrawPoint[] {\n    const shiftedPoints = [];\n    points.forEach((pt) => {\n        shiftedPoints.push(adjust(pt, dx, dy));\n    });\n    return shiftedPoints;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Explode or shrink points around a center point in place\n * @param center The point other points are scaled relative to\n * @param {number} scaleBy Multiplier for the distance between each point and center\n * @param points Points to scale relative to center\n */\nexport function scalePoints(center: Point, scaleBy: number, ...points: DrawPoint[]): void {\n    points.forEach((pt) => {\n        if (!pt || pt.hasOwnProperty('x') === false) {\n            return;\n        }\n        const {x, y} = scale(pt, scaleBy, center);\n        pt.x = x;\n        pt.y = y;\n        if (pt.cp1) {\n            pt.cp1 = scale(pt.cp1, scaleBy, center);\n        }\n        if (pt.cp2) {\n            pt.cp2 = scale(pt.cp2, scaleBy, center);\n        }\n    });\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Rotate a set of points about a pivot in place\n * @param {object} pivot The point to rotate about\n * @param {number} rad Radians counterclockwise to rotate points\n * @param points List of points to rotate about pivot\n */\nexport function rotatePoints(pivot: Point, rad: number, ...points: DrawPoint[]): void {\n    let cos = Math.cos(rad), sin = Math.sin(rad);\n    points.forEach((pt) => {\n        if (!pt || pt.hasOwnProperty('x') === false) {\n            return;\n        }\n        rotateDiff(pivot, pt, sin, cos);\n        if (pt.cp1) {\n            rotateDiff(pivot, pt.cp1, sin, cos);\n        }\n        if (pt.cp2) {\n            rotateDiff(pivot, pt.cp2, sin, cos);\n        }\n    });\n}\n\n/**\n * Helper for rotate points to be used with cached sin and cos\n * @param pivot Point around which to rotate\n * @param pt Point to be rotated\n * @param sin Cached sin(rad) to rotate by\n * @param cos Cached cos(rad) to rotate by\n */\nfunction rotateDiff(pivot: Point, pt: Point, sin: number, cos: number): void {\n    const pointDiff = diff(pivot, pt);\n    const dx = pointDiff.x * cos - pointDiff.y * sin;\n    const dy = pointDiff.x * sin + pointDiff.y * cos;\n    pt.x = pivot.x + dx;\n    pt.y = pivot.y + dy;\n}\n","/**\n * Created by johnson on 10.05.17.\n */\nimport {DrawPoint} from \"./point\";\n\nexport function clone(obj) {\n    if (obj) {\n        return JSON.parse(JSON.stringify(obj));\n    } else {\n        return obj;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Define a draw point if it doesn't exist already\n * @param {object} ex Export holding draw points\n * @param {string} drawPointName Name of the location\n * @param {object} definition Object holding x, y, cp1, and cp2\n */\nexport function fillerDefinition(ex, drawPointName, definition: DrawPoint | {} = {}) {\n    if (ex.hasOwnProperty(drawPointName)) {\n        return;\n    }\n    ex[drawPointName] = definition;\n}\n","/**\n * Created by Johnson on 2017-04-02.\n */\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Convert radians to degrees\n * @param radian\n * @returns {number}\n */\nexport function deg(radian: number): number {\n    return 180 * radian / Math.PI;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Convert degrees to radians\n * @param degree\n * @returns {number}\n */\nexport function rad(degree: number): number {\n    return degree * Math.PI / 180;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Unwrap a radian to its equivalent form between [-PI, PI]\n * @param rad\n */\nexport function unwrapRad(rad: number): number {\n    while (rad > Math.PI) {\n        rad -= 2 * Math.PI;\n    }\n    while (rad < -Math.PI) {\n        rad += 2 * Math.PI;\n    }\n    return rad;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Clamp a number between a minimum and maximum value\n * @param {number} num\n * @param {number} min\n * @param {number} max\n * @returns {number} Clamped number\n */\nexport function clamp(num: number, min: number, max: number): number {\n    return num < min ? min : num > max ? max : num;\n}\n\n/**\n * Round a number to a fixed number of decimals\n * @param {number} num Number to round\n * @param {number} numDecimals Number of decimals\n * @returns {number}\n */\nexport function roundToDec(num: number, numDecimals: number): number {\n    return parseFloat(num.toFixed(numDecimals));\n}\n","/**\n * Created by johnson on 11.05.17.\n */\n\nimport {scale, add, makePoint, extractPoint, diff, getPerpendicularVector, DrawPoint, Point} from \"./point\";\nimport {clone} from \"./util\";\nimport {roundToDec} from \"./numeric\";\n\ntype LinearReduce<T> = (p1: Point, p2: Point) => T;\ntype QuadraticReduce<T> = (p1: Point, cp: Point, p2: Point) => T;\ntype CubicReduce<T> = (p1: Point, cp1: Point, cp2: Point, p2: Point) => T;\n// enforce all the methods return the same result\ntype CurveMethods<T> = { linear: LinearReduce<T>, quadratic: QuadraticReduce<T>, cubic: CubicReduce<T> };\n\nexport function applyToCurve<T>(p1: DrawPoint, p2: DrawPoint,\n                                {linear, quadratic, cubic}: CurveMethods<T>): T {\n    const ep1 = extractPoint(p1);\n    const ep2 = extractPoint(p2);\n    if (p2.cp1 && p2.cp2) {\n        return cubic(ep1, p2.cp1, p2.cp2, ep2);\n    }\n    const cp = p2.cp1 || p2.cp2;\n    if (cp) {\n        return quadratic(ep1, cp, ep2);\n    } else {\n        return linear(ep1, ep2);\n    }\n}\n\n/**\n * Get a point at t (out of [0,1]) along the [p1, p2] curve\n * @param t\n * @param p1\n * @param p2\n * @returns {*}\n */\nexport function getPointOnCurve(t: number, p1: DrawPoint, p2: DrawPoint): DrawPoint {\n    return applyToCurve(p1, p2, {\n        linear: (...cps) => getPointOnLine(t, ...cps),\n        quadratic(...cps) {\n            return makePoint(getQuadraticValue.bind(null, t), ...cps);\n        },\n        cubic(...cps) {\n            return makePoint(getCubicValue.bind(null, t), ...cps);\n        },\n    });\n}\n\n/**\n * Shorthand for getting point on a line connecting p1 -> p2\n * Useful for force treatment of p2 as a linear end point even if it has control points\n * @param t\n * @param p1\n * @param p2\n * @returns {*}\n */\nexport function getPointOnLine(t: number, p1: DrawPoint, p2: DrawPoint): DrawPoint {\n    return makePoint(getLinearValue.bind(null, t), p1, p2);\n}\n\nfunction getLinearValue(t: number, p1: number, p2: number): number {\n    // (1 - t) * p1 + t * p2\n    return t * (p2 - p1) + p1;\n}\n\nfunction getQuadraticValue(t: number, p1: number, cp: number, p2: number): number {\n    // (1 - t)^2 * p1 + 2(1 - t)t * cp + t^2 * p2\n    // gather coefficients of t^2, t, and 1\n    return (p1 + p2 - 2 * cp) * t * t + 2 * (cp - p1) * t + p1;\n}\n\nfunction getCubicValue(t: number, p1: number, cp1: number, cp2: number, p2: number): number {\n    // (1 - t)^3 * p1 + 3(1 - t)^2 * t * cp1 + 3(1 - t)t^2 * cp2 + t^3 * p2\n    // leave in unexpanded form\n    return p1 * (1 - t) * (1 - t) * (1 - t) + 3 * cp1 * (1 - t) * (1 - t) * t +\n        3 * cp2 * (1 - t) * t * t + p2 * t * t * t;\n}\n\ntype SplitSide = { p1: DrawPoint, p2: DrawPoint };\ntype SplitResult = { left: SplitSide, right: SplitSide };\n\nfunction splitBezier(t: number, p1: DrawPoint, cp1: DrawPoint, cp2: DrawPoint, p2: DrawPoint): SplitResult {\n    // split a cubic cubic based on De Casteljau, t is between [0,1]\n    // just a series of linear interpolations\n    const E = getPointOnLine(t, p1, cp1);\n    const F = getPointOnLine(t, cp1, cp2);\n    const G = getPointOnLine(t, cp2, p2);\n    const H = getPointOnLine(t, E, F);\n    const J = getPointOnLine(t, F, G);\n    const K = getPointOnLine(t, H, J);\n\n    const left = {\n        p1,\n        p2: K\n    };\n    left.p2.cp1 = E;\n    left.p2.cp2 = H;\n\n    const right = {\n        p1: extractPoint(K),\n        p2\n    };\n    right.p2.cp1 = J;\n    right.p2.cp2 = G;\n\n    return {\n        left,\n        right\n    };\n}\n\nfunction splitQuadratic(t: number, p1: DrawPoint, cp: DrawPoint, p2: DrawPoint): SplitResult {\n    // split a quadratic cubic based on De Casteljau, t is between [0,1]\n    const D = getPointOnLine(t, p1, cp);\n    const E = getPointOnLine(t, cp, p2);\n    const F = getPointOnLine(t, D, E);\n\n    const left = {\n        p1,\n        p2: F\n    };\n    left.p2.cp1 = D;\n    const right = {\n        p1: extractPoint(F),\n        p2\n    };\n    right.p2.cp1 = E;\n\n    return {\n        left,\n        right\n    };\n}\n\nfunction splitLinear(t: number, p1: DrawPoint, p2: DrawPoint): SplitResult {\n    // split a linear linear\n    const C = getPointOnLine(t, p1, p2);\n    return {\n        left : {\n            p1,\n            p2: C\n        },\n        right: {\n            p1: C,\n            p2\n        }\n    };\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Split the curve between two drawpoints and return all the resulting drawpoints\n * @memberof module:da\n * @param {number} t \"time\" along the curve to split at. Since all curves are parameterized\n * curves, t is their parameter. Can be thought of as traversing along the curve, where 0 is\n * at the start point and 1 is at the end point. This value can go beyond [0,1].\n * @param {object} p1 Starting drawpoint\n * @param {object} p2 Ending drawpoint and also where we look at the control points\n * @returns {{left, right}} Object having a left and right property, each with their own\n * p1 (start point), p2 (end point), and optionally cp1 and cp2 depending on what kind of\n * curve was split. Note that sp.left.p2 === sp.right.p1 always in value.\n */\nexport function splitCurve(t: number, p1: DrawPoint, p2: DrawPoint): SplitResult {\n    // split either a quadratic or cubic curve depending on number of control points on\n    // the end point\n    return applyToCurve(p1, p2, {\n        linear   : splitLinear.bind(null, t),\n        quadratic: splitQuadratic.bind(null, t),\n        cubic    : splitBezier.bind(null, t),\n    });\n}\n\nfunction interpolateLinear(p1: number, p2: number, p: number) {\n    // infinite number of options, can't calculate\n    if (p2 === p1) {\n        return [];\n    }\n    // t\n    return [(p - p1) / (p2 - p1)];\n}\n\ntype QuadraticEquationResult = [] | [number, number];\n\nfunction solveQuadraticEquation(a: number, b: number, c: number): QuadraticEquationResult {\n\n    const discriminant = b * b - 4 * a * c;\n\n    if (discriminant < 0) {\n        return [];\n\n    } else {\n        return [\n            (-b + Math.sqrt(discriminant)) / (2 * a),\n            (-b - Math.sqrt(discriminant)) / (2 * a)\n        ];\n    }\n}\n\n\nfunction interpolateQuadratic(p1: number, cp1: number, p2: number, p: number): QuadraticEquationResult {\n    const a = (p1 - 2 * cp1 + p2);\n    const b = 2 * (cp1 - p1);\n    const c = p1 - p;\n\n    // 2 possible values for t\n    return solveQuadraticEquation(a, b, c);\n}\n\nfunction cubeRoot(v: number): number {\n    if (v < 0) {\n        return -Math.pow(-v, 1 / 3);\n    } else {\n        return Math.pow(v, 1 / 3);\n    }\n}\n\ntype CubicEquationResult = [] | [number] | [number, number] | [number, number, number];\n\n/**\n * Solve a cubic equation of the form x^3 + a * x^2 + b * x + c = 0 for x\n * Uses Cardano's equation\n * See https://trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n * @param a\n * @param b\n * @param c\n * @returns {*}\n */\nfunction solveCubicEquation(a: number, b: number, c: number): CubicEquationResult {\n\n    const a3 = a / 3;\n    // reduce to t^3 + p * t + q = 0 form\n    // always reducible by substituting x = t - a / 3\n    const p = (3 * b - a * a) / 3;\n    const p3 = p / 3;\n    const q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;\n    const q2 = q / 2;\n\n    // further transformation into (u - v)^3 + 3uv(u - v) = u^3 - v^3\n    // with substitutions p = 3uv, -q = u^3 - v^3, t = u - v\n    // v = p/(3u) substituted into\n    // u^3 - v^3 = -q gives\n    // u^3 + q - (p/(3u))^3 = 0 multiply by u^3\n    // u^6 + qu^3 - (p/3)^3 = 0 quadratic in u^3\n    // u^3 = (-q +- sqrt(q^3 + 4(p/3)^3)) / 2 simplified to\n    // u^3 = -q/2 +- sqrt((q/2)^2 + (p/3)^3) get v^3 from u^3 - v^3 = -q\n    // v^3 = q/2  +- sqrt((q/2)^2 + (p/3)^3)\n    // and determine the discriminant:\n    const discriminant = roundToDec(q2 * q2 + p3 * p3 * p3, 8);\n\n    // 1 real root\n    if (discriminant > 0) {\n        const sqrtDiscriminant = Math.sqrt(discriminant);\n        const u = cubeRoot(-q2 + sqrtDiscriminant);\n        const v = cubeRoot(q2 + sqrtDiscriminant);\n        const x1 = u - v - a3;\n        // ignore other imaginary roots\n        return [x1];\n    }\n\n    // all roots real (3 in total, 1 single and 1 double)\n    if (discriminant === 0) {\n        // v = -u\n        const u = cubeRoot(-q2);\n        // t = u - v, x = t - a/3 = u - v - a/3 = 2u - a/3\n        const x1 = 2 * u - a3;\n        // conjugate roots produce 1 double root\n        const x2 = -u - a3;\n        return [x1, x2];\n    }\n\n    // all roots are real and different (unpleasant imaginary discriminant)\n    // first represent in polar form (a + bi) = r(cos(phi) + i*sin(phi))\n    // factoring out i = sqrt(-1)\n    // u^3 = -q/2 + i*sqrt(-discriminant)\n    // v^3 = q/2  + i*sqrt(-discriminant)\n    // for u^3, a = -q/2, b = sqrt(-discriminant)\n    // r^2 = a^2 + b^2 = (-q/2)^2 - discriminant\n    // r^2 = (q/2)^2 - ((q/2)^2 + (p/3)^3) = -(p/3)^3\n    const r = Math.sqrt(-p3 * p3 * p3);\n    // cos(phi) = a/r (triangle with a along Re, b along Im and r hypotenuse)\n    let cosphi = -q2 / r;\n    // correct for float rounding\n    if (cosphi < -1) {\n        cosphi = -1;\n    } else if (cosphi > 1) {\n        cosphi = 1;\n    }\n    const phi = Math.acos(cosphi);\n    // de Moivre's law -> [r(cos(phi) + i*sin(phi)]^n = r^n * (cos(phi/n) + i*sin(phi/n))\n    // values below easy to see if seen as vectors in complex plane\n    // u = r^(1/3) * (cos(phi/3)  + i*sin(phi/3))\n    // v = r^(1/3) * (-cos(phi/3) + i*sin(phi/3))\n    // x = u - v - a/3\n    // imaginary parts cancel out\n    const commonPrefix = 2 * cubeRoot(r);\n    const x1 = commonPrefix * Math.cos(phi / 3) - a3;\n    const x2 = commonPrefix * Math.cos((phi + 2 * Math.PI) / 3) - a3;\n    const x3 = commonPrefix * Math.cos((phi + 4 * Math.PI) / 3) - a3;\n    return [x1, x2, x3];\n}\n\nfunction interpolateCubic(p1: number, cp1: number, cp2: number, p2: number, p: number): CubicEquationResult {\n    // and rewrite from [a(1-t)^3 + 3bt(1-t)^2 + 3c(1-t)t^2 + dt^3] form\n    p1 -= p;\n    cp1 -= p;\n    cp2 -= p;\n    p2 -= p;\n\n    // to [t^3 + at^2 + bt + c] form:\n    const d = -p1 + 3 * cp1 - 3 * cp2 + p2;\n    const a = (3 * p1 - 6 * cp1 + 3 * cp2) / d;\n    const b = (-3 * p1 + 3 * cp1) / d;\n    const c = p1 / d;\n\n    // @ts-ignore\n    return solveCubicEquation(a, b, c).map(t => roundToDec(t, 4));\n}\n\n\ninterface InterpolatePoint extends DrawPoint {\n    t: number;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Get points along the curve from t = [0,1] that share the fixed dimension as betweenPoint.\n * For example, if betweenPoint = {x:10, y:null}, then we are looking for all points with\n * x = 10.\n * @param p1\n * @param p2\n * @param betweenPoint Query that has either x or y set to null which is to be determined\n * @returns {Array} List of draw points that have a \"t\" property which is how far they are along the curve\n */\nexport function interpolateCurve(p1: DrawPoint, p2: DrawPoint,\n                                 betweenPoint: { x: number | null, y: number | null }): InterpolatePoint[] {\n    let knownDim;\n    if (betweenPoint.x === null) {\n        knownDim = \"y\";\n    } else if (betweenPoint.y === null) {\n        knownDim = \"x\";\n    } else {\n        return [];\n    }\n\n    const ts = applyToCurve(p1, p2, {\n        // @ts-ignore\n        linear   : (...cps) => interpolateLinear(...cps.map(cp => cp[knownDim]), betweenPoint[knownDim]),\n        // @ts-ignore\n        quadratic: (...cps) => interpolateQuadratic(...cps.map(cp => cp[knownDim]), betweenPoint[knownDim]),\n        // @ts-ignore\n        cubic    : (...cps) => interpolateCubic(...cps.map(cp => cp[knownDim]), betweenPoint[knownDim]),\n    }).filter((t) => {\n        // solving cubic equations is not very numerically stable...\n        t = roundToDec(t, 3);\n        return t >= 0 && t <= 1;\n    });\n\n    return ts.map((t) => {\n        const p = getPointOnCurve(t, p1, p2) as InterpolatePoint;\n        p.t = t;\n        return p;\n    });\n\n}\n\n\n/**\n * Return the control point for a quadratic curve between two points with\n * a simple deflection parameter\n * @param p1\n * @param p2\n * @param t How far along the linear between p1 and p2 the control point should start\n * @param deflection Which direction and how far perpendicular to the p1-p2 linear\n * the control point should be (the norm of the perpendicular vector)\n * @returns {{x: number, y: number}}\n */\nexport function simpleQuadratic(p1: DrawPoint, p2: DrawPoint, t: number = 0.5, deflection: number = 0): DrawPoint {\n    const cp1 = getPointOnLine(t, p1, p2);\n    return add(cp1, getPerpendicularVector(diff(p1, p2)), deflection);\n}\n\n\n/**\n * Increase the degree of a cubic curve (e.g. quadratic to cubic) without changing its shape\n * @param p1 Starting point of the curve\n * @param p2 Ending point of the curve and holds the other control points\n */\nexport function elevateDegree(p1: DrawPoint, p2: DrawPoint): DrawPoint {\n    const cps = [p1];\n    for (let cp in p2) {\n        if (p2.hasOwnProperty(cp) && cp.startsWith(\"cp\")) {\n            cps.push(p2[cp]);\n        }\n    }\n    cps.push(extractPoint(p2));\n\n    const newEndPoint = extractPoint(p2);\n    // see https://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-elev.html\n    for (let i = 1, newDegree = cps.length; i < newDegree; ++i) {\n        const coefficient = i / newDegree;\n\n        newEndPoint[\"cp\" + i] = makePoint((cpsPrev, cps) => {\n            return coefficient * cpsPrev + (1 - coefficient) * cps;\n        }, cps[i - 1], cps[i]);\n    }\n    return newEndPoint;\n}\n\n/**\n * Get the cubic cubic control point representation of the curve from start to end.\n * If end already has 2 control points return them; if end has only 1 control point (quadratic)\n * then return 2 control points that would lead to an equivalent curve; if end has no control\n * point (linear) then return 2 control points located identically at the midpoint between\n * start and end.\n * @param p1\n * @param p2\n * @returns {[*,*]} cp1 and cp2 of end point\n */\nexport function getCubicControlPoints(p1: DrawPoint, p2: DrawPoint): [DrawPoint, DrawPoint] {\n    return applyToCurve(p1, p2, {\n        linear() {\n            const newEnd = elevateDegree(p1, elevateDegree(p1, p2));\n            return [newEnd.cp1, newEnd.cp2];\n        },\n        quadratic() {\n            const newEnd = elevateDegree(p1, p2);\n            return [newEnd.cp1, newEnd.cp2];\n        },\n        cubic: () => [p2.cp1, p2.cp2]\n    });\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Transform start curve into end curve (results in cubic cubic) with the amount\n * of transformation determined by t [0,1]. Limited to transforming the end point as the start and\n * end curves must have the same starting point\n * @param t Amount to transform, [0,1] 0 is no transformation at all and is equal to the start curve;\n * 1 is full transformation and is equal to the end curve\n * @param p1\n * @param initP2\n * @param endP2\n * @returns Replacement draw point for endP2\n */\nexport function transformCurve(t: number, p1: DrawPoint, initP2: DrawPoint, endP2: DrawPoint): DrawPoint {\n    if (!initP2) {\n        return endP2;\n    }\n    if (!endP2) {\n        return initP2;\n    }\n    const [initCp1, initCp2] = getCubicControlPoints(p1, initP2);\n    const [endCp1, endCp2] = getCubicControlPoints(p1, endP2);\n    const newEnd = getPointOnLine(t, initP2, endP2);\n    newEnd.cp1 = getPointOnLine(t, initCp1, endCp1);\n    newEnd.cp2 = getPointOnLine(t, initCp2, endCp2);\n    return newEnd;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Given a curve defined by (start, end), return a draw point such that (end, returned point) looks identical,\n * but travels in the opposite direction.\n * @param start\n * @param end\n * @returns {*}\n */\nexport function reverseDrawPoint(start: DrawPoint, end: DrawPoint): DrawPoint {\n    if (!start || !end) {\n        return start;\n    }\n    return {\n        x  : start.x,\n        y  : start.y,\n        cp1: clone(end.cp2),\n        cp2: clone(end.cp1)\n    };\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Get a control point that would ensure a smooth continuation from the input curve when\n * used as cp1 either for a quadratic or cubic curve.\n * @param {point} p1 Start point of a curve\n * @param {point} p2 End point of a curve\n * @param {number} scaleBy How much back to extend the continuing control point.\n * A value of 1 produces a symmetric curve.\n * @returns {{x, y}|{x: number, y: number}|*} Continuing control point\n */\nexport function continueCurve(p1: DrawPoint, p2: DrawPoint, scaleBy: number = 1) {\n    return applyToCurve(p1, p2, {\n        linear() {\n            return add(p2, diff(p1, p2), scaleBy);\n        },\n        quadratic() {\n            const cubicEndPoint = elevateDegree(p1, p2);\n            return scale(cubicEndPoint.cp2, -scaleBy, p2);\n        },\n        cubic() {\n            return scale(p2.cp2, -scaleBy, p2);\n        }\n    });\n}\n","export * from './util';\nexport * from './numeric';\nexport * from './point';\nexport * from './curve';\nexport * from './draw';\n","\"use strict\";\n\nimport {breakPoint, DrawPoint, extractPoint} from \"./point\";\nimport {simpleQuadratic} from \"./curve\";\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Styling option to not show stroke or fill\n * @readonly\n * @type {string}\n */\nexport const none = \"rgba(0,0,0,0)\";\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Draw the path formed by the list of drawpoints\n * @param {Context2DTracked} ctx Context2D to render to, if it exists\n * @param {Object[]} points Ordered list of draw points, each with x and y\n */\nexport function drawPoints(ctx: any, ...points) {\n    // given ctx and a list of points, draw points between them based on how many control points\n    // are defined for each\n    // does not begin a path or fill or stroke (just moves pen between the points)\n    if (points.length < 1) {\n        return;\n    }\n    let startPoint = points[0];\n    // if null is passed through, just continue from last location\n    if (startPoint) {\n        if (startPoint.break) {\n            startPoint = points[1];\n        }\n        if (!startPoint.break && !startPoint.end) {\n            ctx.moveTo(startPoint.x, startPoint.y);\n        }\n    }\n    // for every point after\n    for (let i = 1, len = points.length; i < len; ++i) {\n        let p = points[i];\n        // allow calls with nonexistent points so that different drawing modes can be\n        // consolidated\n        if (!p) {\n            // console.log(\"don't have point #\", i);\n            continue;\n        }\n        if (p.break) {\n            ++i;\n            if (i < points.length) {\n                p = points[i];\n                ctx.moveTo(p.x, p.y);\n            }\n        } else if (p.cp2 && p.cp1) {\n            ctx.bezierCurveTo(p.cp1.x, p.cp1.y, p.cp2.x, p.cp2.y, p.x, p.y, p.traceOptions);\n        } else if (p.cp1) {\n            ctx.quadraticCurveTo(p.cp1.x, p.cp1.y, p.x, p.y, p.traceOptions);\n        } else if (p.cp2) {\n            ctx.quadraticCurveTo(p.cp2.x, p.cp2.y, p.x, p.y, p.traceOptions);\n        } else if (!p.break && !p.end) {\n            ctx.lineTo(p.x, p.y);\n        }\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Get the drawpoints for a circle\n * @param {object} center Point at the center of the circle\n * @param {number} radius Radius in cm\n * @returns {object[]} List of draw points for this circle (could be passed to guiMenuItem)\n */\nexport function drawCircle(center: DrawPoint, radius: number): DrawPoint[] {\n    const stretch = 0.552284749831 * radius;\n    let top = {\n        x: center.x,\n        y: center.y + radius,\n        cp1: undefined,\n        cp2: undefined,\n    };\n    let right = {\n        x: center.x + radius,\n        y: center.y,\n        cp1: undefined,\n        cp2: undefined,\n    };\n    let bot = {\n        x: center.x,\n        y: center.y - radius,\n        cp1: undefined,\n        cp2: undefined,\n    };\n    let left = {\n        x: center.x - radius,\n        y: center.y,\n        cp1: undefined,\n        cp2: undefined,\n    };\n    top.cp1 = {\n        x: left.x,\n        y: left.y + stretch\n    };\n    top.cp2 = {\n        x: top.x - stretch,\n        y: top.y\n    };\n    right.cp1 = {\n        x: top.x + stretch,\n        y: top.y\n    };\n    right.cp2 = {\n        x: right.x,\n        y: right.y + stretch\n    };\n    bot.cp1 = {\n        x: right.x,\n        y: right.y - stretch\n    };\n    bot.cp2 = {\n        x: bot.x + stretch,\n        y: bot.y\n    };\n    left.cp1 = {\n        x: bot.x - stretch,\n        y: bot.y\n    };\n    left.cp2 = {\n        x: left.x,\n        y: left.y - stretch\n    };\n    // doesn't actually matter in which order you draw them\n    return [top, right, bot, left, top];\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport function drawSpecificCurl(left, center, right) {\n    const p1 = extractPoint(left);\n    const p2 = extractPoint(center) as DrawPoint;\n    const p3 = extractPoint(right) as DrawPoint;\n\n    {\n        const {t = 0.5, deflection = 0.5} = left;\n        p2.cp1 = simpleQuadratic(p1, p2, t, deflection);\n    }\n    {\n        const {t = 0.5, deflection = 0.5} = right;\n        p3.cp1 = simpleQuadratic(p1, p2, t, deflection);\n    }\n    return [p1, p2, p3];\n}\n\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Debug the curve going into a drawpoint. Use by wrapping a drawpoint with it when returning\n * to guiMenuItem.\n * @param {object} pt\n * @param {object} options Options for how to show the points\n * @returns {*}\n */\nexport function tracePoint(pt, options) {\n    if (!options) {\n        options = {radius: 1};\n    } else if (typeof options === \"number\") {\n        // convenience for defining radius of trace point\n        options = {radius: options};\n    }\n    pt.traceOptions = {point: options};\n    return pt;\n}\n\n\n\n\n"],"sourceRoot":""}